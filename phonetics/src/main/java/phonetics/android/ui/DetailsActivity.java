package phonetics.android.ui;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.baidu.mobads.AdSettings;import com.baidu.mobads.AdView;import com.baidu.mobads.AdViewListener;import com.nostra13.universalimageloader.core.ImageLoader;import org.json.JSONObject;import phonetics.android.BaseActivity;import phonetics.android.Constants;import phonetics.android.R;import phonetics.android.config.Config;import phonetics.android.db.DB_Data;import phonetics.android.entity.CurrentPhonetics;import phonetics.android.entity.PhoneticsEntity;import phonetics.android.fragment.PageBasicFragment;import phonetics.android.fragment.PageExampleFragment;import phonetics.android.fragment.PageSimilarFragment;import phonetics.android.fragment.PageDescribeFragment;import phonetics.android.utils.ClickUtil;import phonetics.android.utils.AnimationUtil;import phonetics.android.utils.DensityUtil;import phonetics.android.utils.FileNameUtil;import phonetics.android.utils.MediaPlayerUtil;import phonetics.android.utils.PlayUtil;import phonetics.android.view.GuideDialog;public class DetailsActivity extends BaseActivity implements OnClickListener {    String Tag = "DetailsActivity";    public static ImageView iv_front, iv_side;//fragment中直接调用    public static int faceSide;//0：正面  1：侧面    public static int voice;// 0：男声   1：女声    PhoneticsEntity.VoiceEty ety;    TextView bt_front, bt_side;    ImageView iv_img;    Button bt_voice;    String firstPic;//显示的第一张图片    RelativeLayout head_layout;    ImageView iv_back, iv_forward, iv_next;    TextView tv_basic, tv_typejp, tv_example, tv_similar;    RelativeLayout ad_layout;    TextView tv_click;    int currentTabIndex;    Fragment[] fragments;    int index;    PageBasicFragment baseFragment;    PageDescribeFragment describeFragment;    PageExampleFragment exampleFragment;    PageSimilarFragment similarFragment;    GuideDialog dialog;//引导    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_details);        initView();        initHeaderViewHight();        initFragment();        initButtonStatus();        setData();        initPageStatus();        theWayGuide();        loadAD();    }    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onPause() {        super.onPause();    }    private void initView() {        head_layout = (RelativeLayout) findViewById(R.id.head_layout);        (bt_front = (TextView) findViewById(R.id.bt_front)).setOnClickListener(this);        (bt_side = (TextView) findViewById(R.id.bt_side)).setOnClickListener(this);        bt_side.setSelected(true);        (iv_img = (ImageView) findViewById(R.id.iv_img)).setOnClickListener(this);        (bt_voice = (Button) findViewById(R.id.bt_voice)).setOnClickListener(this);        bt_voice.setSelected(true);        voice = 0;//默认男声        (iv_front = (ImageView) findViewById(R.id.iv_front)).setOnClickListener(this);        iv_front.setVisibility(View.GONE);        faceSide = 1;//初始化显示侧面        (iv_side = (ImageView) findViewById(R.id.iv_side)).setOnClickListener(this);        (iv_back = (ImageView) findViewById(R.id.iv_back)).setOnClickListener(this);        (iv_forward = (ImageView) findViewById(R.id.iv_forward)).setOnClickListener(this);        (iv_next = (ImageView) findViewById(R.id.iv_next)).setOnClickListener(this);        (tv_basic = (TextView) findViewById(R.id.tv_basic)).setOnClickListener(this);        (tv_typejp = (TextView) findViewById(R.id.tv_typejp)).setOnClickListener(this);        (tv_example = (TextView) findViewById(R.id.tv_example)).setOnClickListener(this);        (tv_similar = (TextView) findViewById(R.id.tv_similar)).setOnClickListener(this);        ad_layout = (RelativeLayout) findViewById(R.id.ad_layout);        tv_click = (TextView) findViewById(R.id.tv_click);    }    public  void initHeaderViewHight(){        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams)head_layout.getLayoutParams();        params.height = Constants.PTImgHeight;        head_layout.setLayoutParams(params);    }    /**     * 初始化Fragment     */    private void initFragment() {        fragments = new Fragment[4];        fragments[0] = baseFragment = new PageBasicFragment();        fragments[1] = describeFragment = new PageDescribeFragment();        fragments[2] = exampleFragment = new PageExampleFragment();        fragments[3] = similarFragment = new PageSimilarFragment();    }    /**     * 引导     */    private void theWayGuide() {        if (dialog == null) {            dialog = new GuideDialog(callBack);        }        if (new DB_Data(mActivity).isGuideMode()) {            dialog.Step2(mActivity);        }    }    /**     * 初始化底部按钮的状态     */    private void initButtonStatus() {        if (!CurrentPhonetics.instance().canForward)            iv_forward.setVisibility(View.INVISIBLE);        else            iv_forward.setVisibility(View.VISIBLE);        if (!CurrentPhonetics.instance().canNext)            iv_next.setVisibility(View.INVISIBLE);        else            iv_next.setVisibility(View.VISIBLE);    }    /**     * 设置基础与高级的显示     */    private void initPageStatus() {        if (CurrentPhonetics.VoiceType.BASIC == CurrentPhonetics.instance().voiceType) {            //基础            index = 0;            currentTabIndex = 0;            tv_basic.setSelected(true);            setBasicPageTabStatus();            getSupportFragmentManager().beginTransaction()                    .add(R.id.fragment_container, fragments[0]).show(fragments[0])                    .commit();        } else {            //高级            index = 1;            currentTabIndex = 1;            tv_basic.setVisibility(View.GONE);            tv_similar.setVisibility(View.GONE);            tv_typejp.setText(R.string.bt_txt_describe);            tv_typejp.setSelected(true);            getSupportFragmentManager().beginTransaction()                    .add(R.id.fragment_container, fragments[1]).show(fragments[1])                    .commit();        }    }    /***     * 动态显示下面的页面切换按钮     */    private void setBasicPageTabStatus() {        int ExampleCount = 0;        try {            ExampleCount = Integer.parseInt(ety.getExamples_count());        } catch (Exception e) {        }        int SimilarCount = 0;        try {            SimilarCount = Integer.parseInt(ety.getSimilar_count());        } catch (Exception e) {        }        tv_example.setVisibility(ExampleCount == 0 ? View.GONE : View.VISIBLE);        tv_similar.setVisibility(SimilarCount == 0 ? View.GONE : View.VISIBLE);    }    private void setData() {        ety = CurrentPhonetics.instance().getCurrentVoice();        setImgData();        setFaceData();    }    private void loadAD() {        //addYoumiAD();        //addTengxunAD();        addBaiduAD();        loadClickCount();    }    /*private void addYoumiAD() {        AdSize size = AdSize.FIT_SCREEN;        if (SCREEN_Width > 900){            size = AdSize.SIZE_728x90;        }        MYoumiAdView adView = new MYoumiAdView(this, size);        adView.setOnClickListener(new MAdView.OnClickListener() {            @Override            public void onClick() {                ClickUtil.adClick(mActivity);                loadClickCount();            }        });        adView.setAdListener(new AdViewListener() {            @Override            public void onReceivedAd(AdView adView) {            }            @Override            public void onSwitchedAd(AdView adView) {            }            @Override            public void onFailedToReceivedAd(AdView adView) {            }        });        // 将广告条加入到布局中        ad_layout.addView(adView);    }*/    /*BannerView banner;    private void addTengxunAD() {        banner = new BannerView(this, ADSize.BANNER, "1104757611", "3070808588818998");        //设置广告轮播时间，为0或30~120之间的数字，单位为s,0标识不自动轮播        banner.setRefresh(30);        banner.setShowClose(false);        banner.setADListener(new BannerADListener() {            @Override            public void onNoAD(int i) {            }            @Override            public void onADReceiv() {            }            @Override            public void onADExposure() {            }            @Override            public void onADClosed() {            }            @Override            public void onADClicked() {                ClickUtil.adClick(mActivity);                loadClickCount();            }            @Override            public void onADLeftApplication() {            }            @Override            public void onADOpenOverlay() {            }            @Override            public void onADCloseOverlay() {            }        });        //发起广告请求，收到广告数据后会展示数据        banner.loadAD();        // 将广告条加入到布局中        ad_layout.addView(banner);    }*/    AdView adView;    private void addBaiduAD() {        AdSettings.setKey(new String[]{"baidu", "中 国 "});        adView = new AdView(this, "2011871");        //设置监听器        adView.setListener(new AdViewListener() {            @Override            public void onAdReady(AdView adView) {            }            @Override            public void onAdShow(JSONObject jsonObject) {            }            @Override            public void onAdClick(JSONObject jsonObject) {                ClickUtil.adClick(mActivity);                loadClickCount();            }            @Override            public void onAdFailed(String s) {            }            @Override            public void onAdSwitch() {            }        });        RelativeLayout.LayoutParams rllp = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);        rllp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);        ad_layout.addView(adView, rllp);    }    private void loadClickCount() {        int count = ClickUtil.getCount(mActivity);        if (count > 0) {            tv_click.setVisibility(View.VISIBLE);            tv_click.setText(count + "");        } else {            tv_click.setVisibility(View.GONE);        }    }    /**     * 音标数据     */    private void setImgData() {        ImageLoader.getInstance().displayImage(Config.SYMBOLPIC_BASE_PATH + ety.getImg() + Config.IMG_TYPE_PNG, iv_img);    }    /**     * 脸型数据     */    private void setFaceData() {        String pics = null;        if (CurrentPhonetics.instance().voiceType == CurrentPhonetics.VoiceType.ADVANCE) {            //高级            pics = ety.getExamples_pics();        } else {            //基础            pics = ety.getPics_front();        }        String[] pic = pics.split(",");        if (pic != null && pic.length > 0) {            firstPic = FileNameUtil.replace(pic[0]);            //ImageLoader.getInstance().displayImage(Config.VOCIEPIC_BASE_PATH + firstPic + Config.IMG_TYPE_JPG, iv_front);            //ImageLoader.getInstance().displayImage(Config.VOCIEPIC_BASE_PATH + "c" + firstPic + Config.IMG_TYPE_JPG, iv_side);            int front_id = getResources().getIdentifier(firstPic, "drawable", "phonetics.android");            if (front_id != 0) {                iv_front.setImageDrawable(getResources().getDrawable(front_id));            }            int side_id = getResources().getIdentifier("c" + firstPic, "drawable", "phonetics.android");            if (side_id != 0) {                iv_side.setImageDrawable(getResources().getDrawable(side_id));            }        }    }    /**     * 正面/侧面切换     *     * @param v     */    private void tabSelect(View v) {        bt_front.setSelected(false);        bt_side.setSelected(false);        v.setSelected(true);        iv_front.setVisibility(View.GONE);        iv_side.setVisibility(View.GONE);        PhoneticsEntity entity = CurrentPhonetics.instance().entity;        switch (v.getId()) {            case R.id.bt_front:                iv_front.setVisibility(View.VISIBLE);                faceSide = 0;//正面                //ImageLoader.getInstance().displayImage(Config.VOCIEPIC_BASE_PATH + firstPic + Config.IMG_TYPE_JPG, iv_front);                int front_id = getResources().getIdentifier(firstPic, "drawable", "phonetics.android");                iv_front.setImageDrawable(getResources().getDrawable(front_id));                break;            case R.id.bt_side:                iv_side.setVisibility(View.VISIBLE);                faceSide = 1;//侧面                //ImageLoader.getInstance().displayImage(Config.VOCIEPIC_BASE_PATH + "c" + firstPic + Config.IMG_TYPE_JPG, iv_side);                int side_id = getResources().getIdentifier("c" + firstPic, "drawable", "phonetics.android");                iv_side.setImageDrawable(getResources().getDrawable(side_id));                break;        }    }    /**     * 高级播放特殊处理     *     * @param ety     */    private void playMedioAdvanced(PhoneticsEntity.VoiceEty ety) {        String examples_read = ety.getExamples_read();        Log.i(Tag, examples_read);        int[] data = PlayUtil.getStepVoicesData(examples_read);        final int start_time = data[0];        final int delay_time = data[1];        Log.i(Tag, start_time + "");        Log.i(Tag, delay_time + "");        String examples_pics = ety.getExamples_pics();        String[] picArray = examples_pics.split(",");        String[] resouce = null;        if (picArray != null && picArray.length > 0) {            resouce = new String[(picArray.length) + 1];//末尾再添加第一章图片            if (faceSide == 0) {                //播放动画                for (int i = 0; i < picArray.length; i++) {                    resouce[i] = FileNameUtil.replace(picArray[i]);                }                resouce[picArray.length] = FileNameUtil.replace(picArray[0]);////末尾再添加第一章图片(动画播放完，保持第一张图片)                AnimationUtil.startAnimation(mActivity, iv_front, resouce, delay_time, new PlayUtil.LoadListener() {                    @Override                    public void complete() {                        MediaPlayerUtil.start(start_time, delay_time);                    }                });            }            if (faceSide == 1) {                //播放动画                for (int i = 0; i < picArray.length; i++) {                    resouce[i] = "c" + FileNameUtil.replace(picArray[i]);                }                resouce[picArray.length] = "c" + FileNameUtil.replace(picArray[0]);////末尾再添加第一章图片(动画播放完，保持第一张图片)                AnimationUtil.startAnimation(mActivity, iv_side, resouce, delay_time, new PlayUtil.LoadListener() {                    @Override                    public void complete() {                        MediaPlayerUtil.start(start_time, delay_time);                    }                });            }        }        //MediaPlayerUtil.start(start_time, delay_time);    }    /**     * 选择fragment     *     * @param v     */    private void pageSelect(View v) {        loadAD();        tv_basic.setSelected(false);        tv_typejp.setSelected(false);        tv_example.setSelected(false);        tv_similar.setSelected(false);        v.setSelected(true);        switch (v.getId()) {            case R.id.tv_basic:                index = 0;                break;            case R.id.tv_typejp:                index = 1;                break;            case R.id.tv_example:                index = 2;                break;            case R.id.tv_similar:                index = 3;                break;        }        pageChange();    }    /**     * 刷新数据     *     * @param v     */    private void reLoadData(View v) {        PhoneticsEntity.VoiceEty ety = null;        switch (v.getId()) {            case R.id.iv_forward:                //上一个                ety = CurrentPhonetics.instance().getForwardVoice();                break;            case R.id.iv_next:                //下一个                ety = CurrentPhonetics.instance().getNextVoice();                break;        }        if (ety != null) {            if (CurrentPhonetics.instance().voiceType == CurrentPhonetics.VoiceType.BASIC) {                pageSelect(tv_basic);            } else {                pageSelect(tv_typejp);            }            setData();            baseFragment.refrashData(ety);            describeFragment.refrashData(ety);            exampleFragment.refrashData(ety);            similarFragment.refrashData(ety);        }        initButtonStatus();        setBasicPageTabStatus();    }    /**     * fragment切换     */    private void pageChange() {        if (currentTabIndex != index) {            FragmentTransaction transaction = getSupportFragmentManager()                    .beginTransaction();            transaction.hide(fragments[currentTabIndex]);            if (!fragments[index].isAdded()) {                transaction.add(R.id.fragment_container, fragments[index]);            }            transaction.show(fragments[index]).commit();        }        currentTabIndex = index;    }    GuideDialog.CallBack callBack = new GuideDialog.CallBack() {        @Override        public void onStep(int step) {            if (Constants.isPlaying) {                //正在播放不进行其他操作                return;            }            switch (step) {                case 4:                    //选择举例                    pageSelect(tv_example);                    break;                case 5:                    //嘴型发音                    PlayUtil.playAnimation(mActivity, faceSide, iv_side, ety, new PlayUtil.LoadListener() {                        @Override                        public void complete() {                            PlayUtil.playMedia(voice, ety);                        }                    });                    //PlayUtil.playMedia(voice, ety);                    break;                case 6:                    //正面侧面切换                    tabSelect(bt_front);                    break;                case 7:                    if (exampleFragment != null)                        exampleFragment.guideForItem();                    break;                case 8:                    if (exampleFragment != null)                        exampleFragment.guideForExample();                    break;                case 9:                    if (exampleFragment != null)                        exampleFragment.guideForSlow();                    break;            }        }    };    @Override    public void onClick(View v) {        if (Constants.isPlaying) {            //正在播放不进行其他操作            return;        }        switch (v.getId()) {            case R.id.bt_front:            case R.id.bt_side:                tabSelect(v);                break;            case R.id.tv_basic:            case R.id.tv_typejp:            case R.id.tv_example:            case R.id.tv_similar:                pageSelect(v);                break;            case R.id.iv_front:            case R.id.iv_side:            case R.id.iv_img:                if (CurrentPhonetics.instance().voiceType == CurrentPhonetics.VoiceType.BASIC) {                    //基础                    if (faceSide == 0) {                        PlayUtil.playAnimation(mActivity, faceSide, iv_front, ety, new PlayUtil.LoadListener() {                            @Override                            public void complete() {                                PlayUtil.playMedia(voice, ety);                            }                        });                    }                    if (faceSide == 1) {                        PlayUtil.playAnimation(mActivity, faceSide, iv_side, ety, new PlayUtil.LoadListener() {                            @Override                            public void complete() {                                PlayUtil.playMedia(voice, ety);                            }                        });                    }                    //PlayUtil.playMedia(voice, ety);                } else {                    //高级                    playMedioAdvanced(ety);                }                break;            case R.id.iv_forward:            case R.id.iv_next:                if (CurrentPhonetics.instance().voiceType == CurrentPhonetics.VoiceType.ADVANCE) {                    //高级                    if (ClickUtil.advancedClick(mActivity)) {                        reLoadData(v);                    }                } else {                    //基础                    if (ClickUtil.basicClick(mActivity)) {                        reLoadData(v);                    }                }                break;            case R.id.bt_voice:                if (v.isSelected()) {                    v.setSelected(false);                    voice = 1;//女声                } else {                    v.setSelected(true);                    voice = 0;//男声                }                break;            case R.id.iv_back:                finish();                break;        }    }    @Override    protected void onDestroy() {        adView.destroy();        //banner.destroy();        super.onDestroy();    }}